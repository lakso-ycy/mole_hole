trigger:
  - main

pr:
  - main

pool:
  vmImage: "ubuntu-latest"

variables:
  - group: deploy_token_fleksibel
  - name: nodeVersion
    value: "20.x"
  - name: SONARQUBE_SERVICE_CONNECTION
    value: "azurevm"
  - name: SONARQUBE_PROJECT_KEY
    value: "mole-and-hole"
  - name: SONARQUBE_PROJECT_NAME
    value: "mole and hole"

stages:
  - stage: Build_Test_Analyze
    displayName: "1. Build - Test, and Analyze"
    jobs:
      - job: BuildJob
        displayName: "Install, Lint, Analyze, and E2E Test"
        timeoutInMinutes: 20
        steps:
          # Fix Cypress terminal issue
          - bash: |
              echo "##vso[task.setvariable variable=TERM]xterm"
            displayName: "Set TERM env for Cypress"

          - task: NodeTool@0
            inputs:
              versionSpec: $(nodeVersion)
            displayName: "Install Node.js $(nodeVersion)"

          - script: npm ci
            displayName: "Clean install project dependencies"

          - script: npx nyc instrument ./ ./instrumented
            displayName: "Instrument source code for coverage"

          - script: |
              cp index.html instrumented/
              cp style.css instrumented/
              cp package.json instrumented/
              cp -r img instrumented/
              cp -r sounds instrumented/
              cp README.md instrumented/
            displayName: "Copy all supporting assets to instrumented/"

          - script: |
              sed -i 's|script.js|instrumented/script.js|g' instrumented/index.html
            displayName: "üîß Patch index.html to use instrumented/script.js"

          - script: chmod -R +x ./node_modules/.bin
            displayName: "Fix permission for node_modules/.bin"

          - script: npm run lint
            displayName: "Run Linter (ESLint & Stylelint)"

          - script: npx http-server ./instrumented -p 8080 &
            displayName: "üåê Start HTTP Server on port 8080"

          - script: npx wait-on http://localhost:8080
            displayName: "‚åõ Wait until HTTP server is ready"

          - script: npx cypress run --browser chrome --spec "cypress/e2e/mole_and_hole.cy.js"
            displayName: "üöÄ Run Cypress E2E Tests"
            env:
              CYPRESS_BASE_URL: "http://localhost:8080"

          - script: npx nyc report --reporter=html --reporter=text --reporter=lcov
            displayName: "üìä Generate NYC Coverage Report"

          - task: SonarQubePrepare@7
            inputs:
              SonarQube: $(SONARQUBE_SERVICE_CONNECTION)
              scannerMode: "CLI"
              configMode: "manual"
              cliProjectKey: $(SONARQUBE_PROJECT_KEY)
              cliProjectName: $(SONARQUBE_PROJECT_NAME)
              extraProperties: |
                sonar.sources=.
                sonar.exclusions=**/node_modules/**,cypress/**
                sonar.javascript.lcov.reportPaths=coverage/lcov.info
            displayName: "üîç Prepare SonarQube Analysis Configuration"

          - task: SonarQubeAnalyze@7
            displayName: "Run SonarQube Analysis"

          - task: SonarQubePublish@7
            displayName: "Publish SonarQube Quality Gate Result"

          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: 'coverage'
              ArtifactName: 'CodeCoverage'
              publishLocation: 'Container'
            displayName: '‚¨ÜÔ∏è Publish Code Coverage Artifact'

          - task: PublishTestResults@2
            inputs:
              testResultsFormat: "JUnit"
              testResultsFiles: "**/results/cypress-results-*.xml"
              mergeTestResults: true
              failTaskOnFailedTests: true
            displayName: "üß™ Publish Cypress Test Results"
            condition: succeededOrFailed()

  - stage: Staging
    displayName: "2. Staging - Prepare Deploy Artifact"
    dependsOn: Build_Test_Analyze
    condition: succeeded()
    jobs:
      - job: StagingJob
        displayName: "Create Release Artifact"
        steps:
          - checkout: self
            displayName: "Checkout source code"

          - task: CopyFiles@2
            inputs:
              SourceFolder: "$(Build.SourcesDirectory)"
              Contents: |
                index.html
                style.css
                script.js
                img/**
                sounds/**
                hammer-hit.png
                hammer.png
                README.md
              TargetFolder: "$(Build.ArtifactStagingDirectory)/game-files"
            displayName: "Copy game files to Staging Directory"

          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: "$(Build.ArtifactStagingDirectory)/game-files"
              ArtifactName: "HoleAndMoleGameDrop"
              publishLocation: "Container"
            displayName: "Publish Game Artifact (HoleAndMoleGameDrop)"

  - stage: Deploy_Static_Web_App
    displayName: "3. Deploy - Deploy to Azure Static Web App"
    dependsOn: Staging
    condition: succeeded()
    jobs:
      - job: DeployJob
        displayName: "Deploy Game to Azure Static Web App"
        steps:
          - task: DownloadBuildArtifacts@0
            inputs:
              buildType: current
              artifactName: HoleAndMoleGameDrop
              downloadPath: $(System.ArtifactsDirectory)

          - task: AzureStaticWebApp@0
            inputs:
              app_location: ""
              api_location: ""
              output_location: ""
              azure_static_web_apps_api_token: "$(AZURE_STATIC_WEB_APPS_API_TOKEN)"
              skip_app_build: true
              workingDirectory: $(System.ArtifactsDirectory)/HoleAndMoleGameDrop
            displayName: "üöÄ Deploy to Azure Static Web App"
