trigger:
  - main

pr:
  - main

pool:
  vmImage: "ubuntu-latest"

variables:
  - group: deploy_token_fleksibel
  - name: nodeVersion
    value: "20.x"
  - name: SONARQUBE_SERVICE_CONNECTION
    value: "azurevm"
  - name: SONARQUBE_PROJECT_KEY
    value: "mole-and-hole"
  - name: SONARQUBE_PROJECT_NAME
    value: "mole and hole"

stages:
  - stage: Build_Test_Analyze
    displayName: "1. Build - Test, and Analyze"
    jobs:
      - job: BuildJob
        displayName: "Install, Lint, Analyze, and E2E Test"
        steps:
          - script: |
              sudo apt-get update
              sudo apt-get install -y libgbm-dev libnss3 libatk-bridge2.0-0 libasound2 libxss1 libappindicator3-1 libindicator7
            displayName: "Install Google Chrome Dependencies"
          # 1. Install Node.js
          - task: NodeTool@0
            inputs:
              versionSpec: $(nodeVersion)
            displayName: "Install Node.js $(nodeVersion)"

          # 2. Install Dependencies dari package-lock.json
          - script: npm ci
            displayName: "Install project dependencies"

          # 3. Jalankan Linter untuk Cek Kualitas Kode Statis
          - script: npm run lint
            displayName: "Run Linter (ESLint & Stylelint)"
            continueOnError: false

          # 4. Siapkan Folder `instrumented` dengan Benar
          - script: |
              cp index.html instrumented/
              cp script.js instrumented/
              cp instrumented/script.js instrumented/
              cp style.css instrumented/
              cp package.json instrumented/
              cp -r cypress instrumented/
              cp cypress.config.js instrumented/
              cp img/hammer.png instrumented/
              cp img/hammer-hit.png instrumented/
              cp -r img instrumented/
              cp -r sounds instrumented/
              cp README.md instrumented/
            displayName: "Prepare 'instrumented' directory for testing"

          # 5. Jalankan Server dan Tes Cypress
          - script: npx http-server -p 8080 > /dev/null 2>&1 &
            displayName: "Start HTTP Server from 'instrumented' folder"
            workingDirectory: $(System.DefaultWorkingDirectory)/instrumented

          - script: npx wait-on http://localhost:8080 -t 30000
            displayName: "Wait for HTTP server to be ready"

          - script: npx cypress run --browser chrome
            displayName: "Run Cypress E2E Tests"
            env:
              CYPRESS_BASE_URL: "http://localhost:8080"
            continueOnError: false # Biarkan false agar pipeline gagal jika tes error

          # 6. Generate Laporan Akhir Code Coverage (setelah tes selesai)
          - script: npx nyc report
            displayName: "Generate final code coverage report"
            condition: always() # Jalankan ini bahkan jika tes gagal, agar kita tetap dapat laporan coverage

          # 7. Jalankan Analisis SonarQube (setelah semua laporan tes & coverage dibuat)
          # - task: SonarQubePrepare@7
          #   inputs:
          #     SonarQube: $(SONARQUBE_SERVICE_CONNECTION)
          #     scannerMode: "CLI"
          #     configMode: "manual"
          #     cliProjectKey: $(SONARQUBE_PROJECT_KEY)
          #     cliProjectName: $(SONARQUBE_PROJECT_NAME)
          #     extraProperties: |
          #       sonar.sources=.
          #       sonar.exclusions=**/node_modules/**,cypress/**,instrumented/**,coverage/**,mochawesome-report/**
          #       sonar.javascript.lcov.reportPaths=coverage/lcov.info
          #       # sonar.eslint.reportPaths=eslint-report.json # Uncomment jika Anda menghasilkan laporan ESLint
          #   displayName: "Prepare SonarQube Analysis Configuration"

          # - task: SonarQubeAnalyze@7
          #   displayName: "Run SonarQube Analysis"

          # - task: SonarQubePublish@7
          #   displayName: "Publish SonarQube Quality Gate Result"
          #   condition: always()

          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: "coverage"
              ArtifactName: "CodeCoverage"
              publishLocation: "Container"
            displayName: "Publish Code Coverage Artifact"

          - task: PublishTestResults@2
            inputs:
              testResultsFormat: "JUnit"
              testResultsFiles: "**/results/*.xml"
              mergeTestResults: true
              failTaskOnFailedTests: true
            condition: always()
            displayName: "Publish Cypress Test Results"

          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: "$(System.DefaultWorkingDirectory)/instrumented/cypress/screenshots"
              ArtifactName: "CypressScreenshots"
              publishLocation: "Container"
            condition: always()
            displayName: "Publish Cypress Screenshots"

  - stage: Staging
    displayName: "2. Staging - Prepare Deploy Artifact"
    dependsOn: Build_Test_Analyze
    condition: succeeded()
    jobs:
      - job: StagingJob
        displayName: "Create Release Artifact"
        steps:
          - checkout: self
            displayName: "Checkout source code"

          - task: CopyFiles@2
            inputs:
              SourceFolder: "$(Build.SourcesDirectory)"
              Contents: |
                index.html
                style.css
                script.js
                hammer-hit.png
                hammer.png
                img/**
                sounds/**
                README.md
              TargetFolder: "$(Build.ArtifactStagingDirectory)/game-files"
            displayName: "Copy game files to Staging Directory"

          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: "$(Build.ArtifactStagingDirectory)/game-files"
              ArtifactName: "HoleAndMoleGameDrop"
              publishLocation: "Container"
            displayName: "Publish Game Artifact (HoleAndMoleGameDrop)"

  - stage: Deploy_Static_Web_App
    displayName: "3. Deploy - Deploy to Azure Static Web App"
    dependsOn: Staging
    condition: succeeded()
    jobs:
      - job: DeployJob
        displayName: "Deploy Game to Azure Static Web App"
        steps:
          - task: DownloadBuildArtifacts@0
            inputs:
              buildType: current
              artifactName: HoleAndMoleGameDrop
              downloadPath: $(System.ArtifactsDirectory)

          - task: AzureStaticWebApp@0
            inputs:
              app_location: ""
              api_location: ""
              output_location: ""
              azure_static_web_apps_api_token: "$(AZURE_STATIC_WEB_APPS_API_TOKEN)"
              skip_app_build: true
              workingDirectory: $(System.ArtifactsDirectory)/HoleAndMoleGameDrop
            displayName: "ðŸš€ Deploy to Azure Static Web App"
