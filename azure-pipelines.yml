trigger:
  - main

pr:
  - main

pool:
  vmImage: "ubuntu-latest"

variables:
  nodeVersion: "20.x"
  SONARQUBE_SERVICE_CONNECTION: "azurevm"
  SONARQUBE_PROJECT_KEY: "mole-and-hole"
  SONARQUBE_PROJECT_NAME: "mole and hole"

stages:
  - stage: CI_Build_Test_Analyze
    displayName: "CI - Build, Test, and Analyze"
    jobs:
      - job: MainJob
        displayName: "Install, Lint, Analyze, and E2E Test"
        steps:
          # Step 1: Install Node.js
          - task: NodeTool@0
            inputs:
              versionSpec: $(nodeVersion)
            displayName: "Install Node.js $(nodeVersion)"

          # Step 2: Install Dependencies
          - script: npm ci
            displayName: "Clean install project dependencies (npm ci)"

          # Step 3: Fix Permissions (Prevent Permission Denied)
          - script: chmod -R +x ./node_modules/.bin
            displayName: "Fix permission for node_modules/.bin"
            condition: succeeded()

          # # Step 4: Run ESLint & Stylelint
          # - script: npm run lint
          #   displayName: 'Run Linter (ESLint & Stylelint)'
          #   continueOnError: true

          # Step 5: Prepare SonarQube Analysis
          - task: SonarQubePrepare@7
            inputs:
              SonarQube: $(SONARQUBE_SERVICE_CONNECTION)
              scannerMode: "CLI"
              configMode: "manual"
              cliProjectKey: $(SONARQUBE_PROJECT_KEY)
              cliProjectName: $(SONARQUBE_PROJECT_NAME)
              extraProperties: |
                sonar.sources=.
                sonar.exclusions=**/node_modules/**,cypress/**
            displayName: "Prepare SonarQube Analysis Configuration"

          - task: SonarQubeAnalyze@7
            displayName: "Run SonarQube Analysis"

          - task: SonarQubePublish@7
            displayName: "Publish SonarQube Quality Gate Result"

          # Step 6: Start Server for Cypress
          - script: npx http-server -p 8080 &
            displayName: "Start HTTP Server for Cypress (Port 8080)"
            workingDirectory: $(System.DefaultWorkingDirectory)

          # Step 7: Run Cypress Tests SSS
          - script: npx cypress run --spec "cypress/e2e/mole_and_hole.cy.js"
            displayName: "Run Cypress E2E Tests"
            env:
              CYPRESS_BASE_URL: "http://localhost:8080"
            continueOnError: true

          # Step 8: Publish Cypress Test Results
          - task: PublishTestResults@2
            inputs:
              testResultsFormat: "JUnit"
              testResultsFiles: "**/results/cypress-results-*.xml"
              mergeTestResults: true
              failTaskOnFailedTests: true
            displayName: "Publish Cypress Test Results"
            condition: succeededOrFailed()

          # Step 9: Copy Game Files to Staging
          - task: CopyFiles@2
            inputs:
              SourceFolder: "$(Build.SourcesDirectory)"
              Contents: |
                index.html
                style.css
                script.js
                img/**
                sounds/**
                hammer-hit.png
                hammer.png
                README.md
              TargetFolder: "$(Build.ArtifactStagingDirectory)/game-files"
            displayName: "Copy game files to Staging Directory"

          # Step 10: Publish Build Artifactss
          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: "$(Build.ArtifactStagingDirectory)/game-files"
              ArtifactName: "HoleAndMoleGameDrop"
              publishLocation: "Container"
            displayName: "Publish Game Artifact (HoleAndMoleGameDrop)"
