# ==========================================
# Jalankan pipeline setiap ada commit/PR ke branch main
trigger:
  - main

pr:
  - main

# Gunakan VM Ubuntu terbaru dari Azure Pipelines
pool:
  vmImage: "ubuntu-latest"

# Variabel global untuk pipeline
variables:
  - group: deploy_token_fleksibel # Variabel group (token rahasia dsb)
  - name: nodeVersion
    value: "20.x" # Versi Node.js yang digunakan
  - name: SONARQUBE_SERVICE_CONNECTION
    value: "azurevm" # Nama koneksi SonarQube di Azure DevOps
  - name: SONARQUBE_PROJECT_KEY
    value: "mole-and-hole" # Key project SonarQube
  - name: SONARQUBE_PROJECT_NAME
    value: "mole and hole" # Nama project di SonarQube

# ========== STAGE 1: Build, Test, Analyze ==========
stages:
  # STAGE 1: Build, Test, and Analyze
  # Stage ini adalah tahap pertama dari pipeline, namanya bebas (Build_Test_Analyze) untuk identifikasi.
  - stage: Build_Test_Analyze
    displayName: "1. Build - Test, and Analyze"
    jobs:
      - job: BuildJob
        displayName: "Install, Lint, Analyze, and E2E Test"
        steps:
          # Step 1: Install Node.js
          # Memasang Node.js versi sesuai variabel pipeline ke dalam agent pipeline
          - task: NodeTool@0
            inputs:
              versionSpec: $(nodeVersion) # Mengambil dari variabel di atas, misal '20.x'
            displayName: "Install Node.js $(nodeVersion)"

          # Step 2: Install Dependencies
           # Perintah 'npm ci' akan install semua dependency dari package-lock.json dengan cepat dan konsisten (lebih baik untuk CI dibanding 'npm install').
          - script: npm ci
            displayName: "Clean install project dependencies (npm ci)"

          # Step 3: Fix Permissions (Prevent Permission Denied)
          # Memastikan semua file binary dalam node_modules/.bin bisa dieksekusi (chmod +x), penting di agent Ubuntu/Linux.
          - script: chmod -R +x ./node_modules/.bin
            displayName: "Fix permission for node_modules/.bin"
            condition: succeeded() # Step ini dijalankan hanya kalau step sebelumnya sukses

          # Step 4: Run ESLint & Stylelint
          # Menjalankan perintah 'npm run lint' untuk mengecek style dan kualitas code JavaScript & CSS.
          - script: npm run lint
            displayName: 'Run Linter (ESLint & Stylelint)'
            continueOnError: true # Jika linting error, pipeline tetap berenti

          - script: |
              echo "üéØ Jalankan nyc instrument..."
              npx nyc instrument ./ ./instrumented
              cp index.html instrumented/
              cp -r img instrumented/
              cp style.css instrumented/
            displayName: "Instrumentasi + Salin index.html"

          - script: |
              echo "üìÅ Cek isi folder instrumented/"
              ls -lah instrumented
            displayName: "DEBUG: Lihat isi folder instrumented"

        # ----------- Step 8: Start HTTP Server (untuk test E2E) -----------
        # Menjalankan server lokal pada port 8080 agar aplikasi bisa diakses oleh Cypress untuk testing otomatis.
          - script: npx http-server ./instrumented -p 8080 &
            displayName: "Start HTTP Server for Cypress (Port 8080)"
            workingDirectory: $(System.DefaultWorkingDirectory) # Ini adalah $(Build.SourcesDirectory)

        # ----------- Step 9: Jalankan Cypress E2E Tests -----------
        # Menjalankan test end-to-end menggunakan Cypress. Test berjalan di browser (otomatis).
          - script: npx cypress run --spec "cypress/e2e/mole_and_hole.cy.js"
            displayName: "Run Cypress E2E Tests"
            env:
              CYPRESS_BASE_URL: "http://localhost:8080" # Base URL yang akan diakses Cypress selama test
            continueOnError: false # kalo gagal maka berenti

        # Step DEBUG 1: cek apakah folder coverage sudah ada dan ada file di dalamnya
          - script: |
              echo "=== CEK ISI FOLDER COVERAGE ==="
              ls -lah coverage
            displayName: "DEBUG: Cek isi folder coverage di pipeline"

        # Step DEBUG 2: cek apakah lcov.info sudah terbentuk
          - script: |
              echo "=== CEK ISI FILE coverage/lcov.info ==="
              cat coverage/lcov.info || echo "lcov.info TIDAK ADA"
            displayName: "DEBUG: Cek isi coverage/lcov.info"

        # ----------- Step 10: Publish Cypress Test Results ke Azure DevOps -----------
        # Mengunggah hasil test (format JUnit XML) ke Azure DevOps supaya bisa dilihat di dashboard (tab Tests).
          - task: PublishTestResults@2
            inputs:
              testResultsFormat: "JUnit" # Format hasil test
              testResultsFiles: "**/results/cypress-results-*.xml" # File hasil test Cypress
              mergeTestResults: true # Gabungkan hasil jika ada banyak file
              failTaskOnFailedTests: true # Build dianggap gagal kalau test gagal
            displayName: "Publish Cypress Test Results"
            condition: succeededOrFailed() # Step ini tetap dijalankan walau ada step error (supaya hasil test tetap dipublish)

            # Step 5: Prepare SonarQube Analysis
          # Menyiapkan konfigurasi untuk analisa kualitas kode di SonarQube.
          - task: SonarQubePrepare@7
            inputs:
              SonarQube: $(SONARQUBE_SERVICE_CONNECTION) # Nama koneksi ke SonarQube di Azure
              scannerMode: "CLI" # Mode pemindaian (pakai CLI)
              configMode: "manual" # Setting manual
              cliProjectKey: $(SONARQUBE_PROJECT_KEY) # Key project SonarQube
              cliProjectName: $(SONARQUBE_PROJECT_NAME) # Nama project di SonarQube
              extraProperties: | # Properti tambahan, misal meng-exclude folder
                sonar.sources=. 
                sonar.inclusions=script.js
                sonar.exclusions=**/node_modules/**,cypress/**
                sonar.javascript.lcov.reportPaths=./coverage/lcov.info
            displayName: "Prepare SonarQube Analysis Configuration"

        # ----------- Step 6: Run SonarQube Analysis -----------
        # Memulai proses analisa code quality oleh SonarQube.
          - task: SonarQubeAnalyze@7
            displayName: "Run SonarQube Analysis"

        # ----------- Step 7: Publish SonarQube Quality Gate Result -----------
        # Mengirim hasil analisa ke dashboard SonarQube (cek Quality Gate pass/fail)
          - task: SonarQubePublish@7
            displayName: "Publish SonarQube Quality Gate Result"

  # STAGE 2: Staging - Prepare Artifact
  - stage: Staging
    displayName: "2. Staging - Prepare Deploy Artifact"
    dependsOn: Build_Test_Analyze #???
    condition: succeeded() # Kalau PublishTestResults@2 sukses, maka jobs akan dilanjutkan
    jobs:
      - job: StagingJob
        displayName: "Create Release Artifact"
        steps:
          - checkout: self # Perintah ini hanya mengambil kode terbaru yang dijalankan oleh yaml ini
            displayName: "Checkout source code"

          # Step 9 (dari YAML lama): Copy Game Files to Staging Directory
          - task: CopyFiles@2
            inputs:
              SourceFolder: "$(Build.SourcesDirectory)" # Repos utama karena hanya single repos, jadi agen otomatis mengambil kode yang sama dari GUI yang developer lihat
              Contents: |
                index.html
                style.css
                script.js
                img/**
                sounds/**
                hammer-hit.png
                hammer.png
                README.md
              TargetFolder: "$(Build.ArtifactStagingDirectory)/game-files" # SourceFolder akan di-copy oleh agen dan paste files tersebut kesini. Ini tuh artifact atau tempat penyimpanan sementara yang di-paste oleh agen dan nanti dihapus secara otomatis
            displayName: "Copy game files to Staging Directory" 

          # Step 10 (dari YAML lama): Publish Build Artifact
          - task: PublishBuildArtifacts@1 
            inputs:
              PathtoPublish: "$(Build.ArtifactStagingDirectory)/game-files" # Semacam source folder dan akan di-copy
              ArtifactName: "HoleAndMoleGameDrop"
              publishLocation: "Container" # Paste file yang ada di PathtoPublish ke container
            displayName: "Publish Game Artifact (HoleAndMoleGameDrop)"

  # STAGE 3: Deploy - Deploy to Azure Static Web App
  - stage: Deploy_Static_Web_App
    displayName: "3. Deploy - Deploy to Azure Static Web App"
    dependsOn: Staging # Bergantung pada suksesnya stage Staging
    condition: succeeded() # Kalau kondisi upload ke container berhasil maka, jobs akan dilanjutkan
    jobs:
      - job: DeployJob
        displayName: "Deploy Game to Azure Static Web App"
        steps:
          - task: DownloadBuildArtifacts@0
            inputs:
              buildType: current # Ambil artifact dari build/pipeline yang sedang dijalankan sekarang atau dia hanya mengambil code dari stage yang barusan dijalankan
              artifactName: HoleAndMoleGameDrop
              downloadPath: $(System.ArtifactsDirectory) # Setelah di download maka disimpan sementara oleh agen, langsung dihapus nantinya

          - task: AzureStaticWebApp@0
            inputs:
              app_location: ""
              api_location: ""
              output_location: ""
              azure_static_web_apps_api_token: "$(AZURE_STATIC_WEB_APPS_API_TOKEN)" # Dari variable group Anda
              skip_app_build: true
              workingDirectory: $(System.ArtifactsDirectory)/HoleAndMoleGameDrop # Ambil source code terbaru yang sudah melewati tahap staging
            displayName: "üöÄ Deploy to Azure Static Web App"